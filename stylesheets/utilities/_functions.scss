@import "unit-functions";

/// returns the key value for a nested map
/// @param {Map} $map
/// @param {Key} $map-key
/// @param {Key} $key
/// @returns {*}
@function map-nested-get($map, $map-key, $key) {
  @if (type-of($map) != map) {
    @return null;
  }
  $n-map:map-get($map,$map-key);
  @if (type-of($n-map) != map) {
    @return null;
  }
  @if not (map-has-key($n-map,$key)){
    @return null;
  }@else{
    @return map-get($n-map,$key);
  }
}

/// return the value for the key or the default value, if no key
/// @param {Map} $map
/// @param {Key} $key
/// @param {Value} $default-value
/// @returns {*}
@function map-get-default($map,$key,$default-value){
  @if not (map-has-key($map,$key)){
    @return $default-value;
  }@else{
    @return map-get($map,$key);
  }
}

/// nested map: return the value for the key or the default value, if no key
/// @param {Map} $map
/// @param {Key} $map-key
/// @param {Key} $key
/// @param {Value} $default-value
/// @returns {*}
@function map-nested-get-default($map, $map-key, $key,$default-value) {
  @if (type-of($map) != map) {
    @return $default-value;
  }
  $n-map:map-get($map,$map-key);
  @if (type-of($n-map) != map) {
    @return $default-value;
  }
  @if not (map-has-key($n-map,$key)){
    @return $default-value;
  }@else{
    @return map-get($n-map,$key);
  }
}




/// alias for map-merge
/// @param {Map} $map
/// @param {Map} $ext-map
/// @returns {Map}
@function extend($map, $ext-map) {
  @return map-merge($map, $ext-map);
}

/// darken a gradient list by a % factor
/// @param {List} $list
/// @param {Number} $factor
/// @return {List}
@function darken-gradient($list,$factor){
  $darken-list:();
  @each $val in $list{
    @if type-of($val)==list{
      $darken-val:darken-list-value($val,$factor);
      $darken-list:append($darken-list,$darken-val,comma);
    }@else{
      $_val:darken($val, $factor);
      $darken-list:append($darken-list,$_val,comma);
    }
  }

  @return $darken-list;
}

/// converts columns to percentage
/// @param {Int} $columns
/// @return {Number}
@function columns-to-percentage($columns) {
  $v: (1/$columns)*100;
  $v1: $v - 1;
  $v2: ($v1/100)*100%;
  @return $v2;
}

/// convert fraction to decimal
/// @param {Number}
/// @return {Number}
@function convert-to-decimal($fraction) {
  $result: ($fraction*100)/100;
  @return $result;
}




/// returns the margin-left/padding-left value for a margin/padding shorthand list
/// @param {List} $margin
/// @return {Value}
@function margin-left($margin) {
  @if (type_of($margin) == list) {
    $length: length($margin);
    @if $length == 1 {
      @return $margin;
    } @else if $length == 2 {
      @return nth($margin, 2);
    } @else if $length == 3 {
      @return nth($margin, 2);
    } @else {
      @return nth($margin, 4);
    }
  } @else {
    @return $margin;
  }
}

/// returns the margin-right/padding-right value for a margin/padding shorthand list
/// @param {List} $margin
/// @return {Value}
@function margin-right($margin) {
  @if (type_of($margin) == list) {
    $length: length($margin);
    @if $length == 1 {
      @return $margin;
    } @else {
      @return nth($margin, 2);
    }
  } @else {
    @return $margin;
  }
}

/// returns the margin-top/padding-top value for a margin/padding shorthand list
/// @param {List} $margin
/// @return {Value}
@function margin-top($margin) {
  @if (type_of($margin) == list) {
    $length: length($margin);
    @if $length == 1 {
      @return $margin;
    } @else {
      @return nth($margin, 1);
    }
  } @else {
    @return $margin;
  }
}

/// returns the margin-bottom/padding-bottom value for a margin/padding shorthand list
/// @param {List} $margin
/// @return {Value}
@function margin-bottom($margin) {
  @if (type_of($margin) == list) {
    $length: length($margin);
    @if $length == 1 {
      @return $margin;
    } @else if $length == 2 {
      @return nth($margin, 1);
    } @else {
      @return nth($margin, 3);
    }
  } @else {
    @return $margin;
  }
}

/// list contains a number
/// @param {List} $list
/// @return {Boolean}
@function list-has-number($list) {
  $ret: false;
  @if (type_of($list) == list) {
    @each $val in $list {
      @if type-of($val) == number {
        $ret: true;
      }
    }
  } @else {
    @if type-of($list) == number {
      $ret: true;
    }
  }

  @return $ret;
}

/// darkens a list by a factor
/// @param {List} $color-list
/// @param {Number} $factor
/// @return {List}
@function darken-rule($color-list, $factor) {
  $rule: '';
  @each $val in $color-list {
    @if ($val != transparent) {
      $rule: $rule + ' ' + darken($val,$factor);
    }
  }
  @return unquote($rule);
}

/// returns an absolute top position for an icon
/// @param {List} $padding
/// @param {Value} $icon-size
/// @return {Value}
@function icon-position($padding, $icon-size) {
  $padding-top: margin-top($padding);
  $padding-top: strip-unit($padding-top);
  $padding-bottom: margin-top($padding);
  $padding-bottom: strip-unit($padding-bottom);
  $size: strip-unit($icon-size);
  $size: $size*2;
  $fraction-top: ($padding-top + $padding-bottom);
  $fraction: $fraction-top/$size;
  $decimal: convert-to-decimal($fraction);
  $top: #{$decimal}em;
  @return $top;

}

/// returns an absolute right position for an icon
/// @param {Value} $icon-size
/// @return {Value}
@function icon-position-right($icon-size) {
  $size: strip-unit($icon-size);
  @if $size <= 1.1 {
    @return .5em;
  } @else if ($size > 1.1 and $size <=2) {
    @return .1em;
  } @else {
    @return 1px;
  }
}

/// returns an absolute left position for an icon
/// @param {Value} $icon-size
/// @return {Value}
@function icon-position-left($icon-size) {
  $pos: icon-position-right($icon-size);
  @return $pos;
}

/// returns a line height
/// @param {Value} $icon-size
/// @param {Value} $line-height
/// @return {Value}
@function component-line-height($icon-size, $line-height) {
  $size: strip-unit($icon-size);
  $decimal: convert-to-decimal($line-height/$size);
  @return $decimal;
}

/// http://www.sitepoint.com/extra-map-functions-sass/

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function map-depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(map-depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Test if map got all `$keys` at first level
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }

  @return true;
}

/// Test if map got all `$keys` nested with each others
/// @author Hugo Giraudel
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to test
/// @return {Bool}
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}


/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
        + "Resulting map will only have #{$min} pairs.";
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}


/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
          // Recursive extend
          $value: map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}


/// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/

@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}

@function last-index($list, $value) {
  @for $i from length($list)*-1 through -1 {
    @if nth($list, abs($i)) == $value {
      @return abs($i);
    }
  }

  @return null;
}

@function last-index($list, $value) {
  @for $i from length($list)*-1 through -1 {
    @if nth($list, abs($i)) == $value {
      @return abs($i);
    }
  }

  @return null;
}

@function prepend($list, $value) {
  @return join($value, $list);
}

@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  } @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  } @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  } @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    } @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  } @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  } @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  } @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  } @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  } @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list)*-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}

@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    } @else {
      $result: if($i != length($list) or $is-nested, $result #{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

@function loop($list, $value: 1) {
  $result: ();

  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }

  @return $result;
}

@function color-get($value){
  @if(type-of($value)==list){
    @return last($value);
  }@else{
    @return $value;
  }
}




